{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x58da42ddbe3566c8f96e2bc10ca60f51cdfaaa222d4f6ea4cc1b0d17cbfcdf2a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "852435",
    "logsBloom": "0x
    "blockHash": "0x991369f4ea5b38c5d589331594e1d964b0d66d420ddff796a1109ed8f7c03e0d",
    "transactionHash": "0x58da42ddbe3566c8f96e2bc10ca60f51cdfaaa222d4f6ea4cc1b0d17cbfcdf2a",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "852435",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "b3640743059cc5c85feac7e2e8efff57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Atharv Gulati\",\"details\":\"This impliments priceFeeds as our library \",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowdfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.8;\\n\\n//Imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n// Error Codes\\nerror FundMe__NotOwner();\\n// Interfaces, Liberaries, Contracts\\n/**@title A contract for crowdfunding\\n * @author Atharv Gulati\\n * @notice This contract is to demo a sample funding contract\\n * @dev This impliments priceFeeds as our library\\n * \\n*/\\ncontract FundMe {\\n    // Type declarations\\n    using PriceConverter for uint256;\\n    // State variables\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface priceFeed;\\n    // Modifiers\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    // Rest of the functions\\n    constructor( address priceFeedAddress) {\\n        priceFeed=AggregatorV3Interface (priceFeedAddress);\\n        i_owner = msg.sender;\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n    \\n \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\",\"keccak256\":\"0xd6643ec940dede0fdca1a5323eeaa0b794496634112c014ae573465d5cb852c2\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x08cd043af6fb2dc9c1174c692908550daee96fb0783644da2622517e80522fda\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ef7380380610ef78339818101604052810190610032919061011d565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b610d9e806101596000396000f3fe6080604052600436106100745760003560e01c80639e87a5cd1161004e5780639e87a5cd1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107b0565b610525565b6040516100d891906107f6565b60405180910390f35b3480156100ed57600080fd5b506100f661053d565b60405161010391906107f6565b60405180910390f35b34801561011857600080fd5b5061012161054a565b60405161012e9190610870565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610574565b604051610163919061089a565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e1565b61059a565b6040516101a0919061089a565b60405180910390f35b6802b5e3af16b18800006101e8600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d990919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061096b565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027791906109ba565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610415576000600182815481106103905761038f6109ee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040d90610a1d565b91505061036d565b50600067ffffffffffffffff81111561043157610430610a65565b5b60405190808252806020026020018201604052801561045f5781602001602082028036833780820191505090505b50600190805190602001906104759291906106a6565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049c90610ac5565b60006040518083038185875af1925050503d80600081146104d9576040519150601f19603f3d011682016040523d82523d6000602084013e6104de565b606091505b5050905080610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610b26565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600181815481106105aa57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105e583610615565b90506000670de0b6b3a764000085836105fe9190610b46565b6106089190610bb7565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190610c75565b5050509150506402540be4008161069e9190610cf0565b915050919050565b82805482825590600052602060002090810192821561071f579160200282015b8281111561071e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c6565b5b50905061072c9190610730565b5090565b5b80821115610749576000816000905550600101610731565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077d82610752565b9050919050565b61078d81610772565b811461079857600080fd5b50565b6000813590506107aa81610784565b92915050565b6000602082840312156107c6576107c561074d565b5b60006107d48482850161079b565b91505092915050565b6000819050919050565b6107f0816107dd565b82525050565b600060208201905061080b60008301846107e7565b92915050565b6000819050919050565b600061083661083161082c84610752565b610811565b610752565b9050919050565b60006108488261081b565b9050919050565b600061085a8261083d565b9050919050565b61086a8161084f565b82525050565b60006020820190506108856000830184610861565b92915050565b61089481610772565b82525050565b60006020820190506108af600083018461088b565b92915050565b6108be816107dd565b81146108c957600080fd5b50565b6000813590506108db816108b5565b92915050565b6000602082840312156108f7576108f661074d565b5b6000610905848285016108cc565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610955601b8361090e565b91506109608261091f565b602082019050919050565b6000602082019050818103600083015261098481610948565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c5826107dd565b91506109d0836107dd565b92508282019050808211156109e8576109e761098b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a28826107dd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5a57610a5961098b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aaf600083610a94565b9150610aba82610a9f565b600082019050919050565b6000610ad082610aa2565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b10600b8361090e565b9150610b1b82610ada565b602082019050919050565b60006020820190508181036000830152610b3f81610b03565b9050919050565b6000610b51826107dd565b9150610b5c836107dd565b9250828202610b6a816107dd565b91508282048414831517610b8157610b8061098b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bc2826107dd565b9150610bcd836107dd565b925082610bdd57610bdc610b88565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c0781610be8565b8114610c1257600080fd5b50565b600081519050610c2481610bfe565b92915050565b6000819050919050565b610c3d81610c2a565b8114610c4857600080fd5b50565b600081519050610c5a81610c34565b92915050565b600081519050610c6f816108b5565b92915050565b600080600080600060a08688031215610c9157610c9061074d565b5b6000610c9f88828901610c15565b9550506020610cb088828901610c4b565b9450506040610cc188828901610c60565b9350506060610cd288828901610c60565b9250506080610ce388828901610c15565b9150509295509295909350565b6000610cfb82610c2a565b9150610d0683610c2a565b9250828202610d1481610c2a565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d4c57610d4b61098b565b5b8282058414831517610d6157610d6061098b565b5b509291505056fea2646970667358221220da20d40b3793a5ccb08525a0704035079e62361c024eac9cfecc6956a6dd6ff964736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80639e87a5cd1161004e5780639e87a5cd1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107b0565b610525565b6040516100d891906107f6565b60405180910390f35b3480156100ed57600080fd5b506100f661053d565b60405161010391906107f6565b60405180910390f35b34801561011857600080fd5b5061012161054a565b60405161012e9190610870565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610574565b604051610163919061089a565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e1565b61059a565b6040516101a0919061089a565b60405180910390f35b6802b5e3af16b18800006101e8600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d990919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061096b565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027791906109ba565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610415576000600182815481106103905761038f6109ee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040d90610a1d565b91505061036d565b50600067ffffffffffffffff81111561043157610430610a65565b5b60405190808252806020026020018201604052801561045f5781602001602082028036833780820191505090505b50600190805190602001906104759291906106a6565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049c90610ac5565b60006040518083038185875af1925050503d80600081146104d9576040519150601f19603f3d011682016040523d82523d6000602084013e6104de565b606091505b5050905080610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610b26565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600181815481106105aa57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105e583610615565b90506000670de0b6b3a764000085836105fe9190610b46565b6106089190610bb7565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190610c75565b5050509150506402540be4008161069e9190610cf0565b915050919050565b82805482825590600052602060002090810192821561071f579160200282015b8281111561071e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c6565b5b50905061072c9190610730565b5090565b5b80821115610749576000816000905550600101610731565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077d82610752565b9050919050565b61078d81610772565b811461079857600080fd5b50565b6000813590506107aa81610784565b92915050565b6000602082840312156107c6576107c561074d565b5b60006107d48482850161079b565b91505092915050565b6000819050919050565b6107f0816107dd565b82525050565b600060208201905061080b60008301846107e7565b92915050565b6000819050919050565b600061083661083161082c84610752565b610811565b610752565b9050919050565b60006108488261081b565b9050919050565b600061085a8261083d565b9050919050565b61086a8161084f565b82525050565b60006020820190506108856000830184610861565b92915050565b61089481610772565b82525050565b60006020820190506108af600083018461088b565b92915050565b6108be816107dd565b81146108c957600080fd5b50565b6000813590506108db816108b5565b92915050565b6000602082840312156108f7576108f661074d565b5b6000610905848285016108cc565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610955601b8361090e565b91506109608261091f565b602082019050919050565b6000602082019050818103600083015261098481610948565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c5826107dd565b91506109d0836107dd565b92508282019050808211156109e8576109e761098b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a28826107dd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5a57610a5961098b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aaf600083610a94565b9150610aba82610a9f565b600082019050919050565b6000610ad082610aa2565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b10600b8361090e565b9150610b1b82610ada565b602082019050919050565b60006020820190508181036000830152610b3f81610b03565b9050919050565b6000610b51826107dd565b9150610b5c836107dd565b9250828202610b6a816107dd565b91508282048414831517610b8157610b8061098b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bc2826107dd565b9150610bcd836107dd565b925082610bdd57610bdc610b88565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c0781610be8565b8114610c1257600080fd5b50565b600081519050610c2481610bfe565b92915050565b6000819050919050565b610c3d81610c2a565b8114610c4857600080fd5b50565b600081519050610c5a81610c34565b92915050565b600081519050610c6f816108b5565b92915050565b600080600080600060a08688031215610c9157610c9061074d565b5b6000610c9f88828901610c15565b9550506020610cb088828901610c4b565b9450506040610cc188828901610c60565b9350506060610cd288828901610c60565b9250506080610ce388828901610c15565b9150509295509295909350565b6000610cfb82610c2a565b9150610d0683610c2a565b9250828202610d1481610c2a565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d4c57610d4b61098b565b5b8282058414831517610d6157610d6061098b565b5b509291505056fea2646970667358221220da20d40b3793a5ccb08525a0704035079e62361c024eac9cfecc6956a6dd6ff964736f6c63430008130033",
  "devdoc": {
    "author": "Atharv Gulati",
    "details": "This impliments priceFeeds as our library ",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowdfunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 262,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 265,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 267,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}